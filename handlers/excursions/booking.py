# handlers/excursions/booking.py  (—ç–∫—Å–∫—É—Ä—Å–∏–∏)
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from config import ADMIN_CHAT
from utils.loader import load_excursions

router = Router()

class BookingStates(StatesGroup):
    waiting_name = State()
    waiting_count = State()
    waiting_date = State()
    waiting_residence = State()
    waiting_transport = State()     # –î–∞/–ù–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    waiting_messenger = State()     # WhatsApp / Telegram (–∫–Ω–æ–ø–∫–∏)
    waiting_phone = State()         # –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É
    waiting_wishes = State()

def _get_title(cat_id: str, tour_id: str) -> str:
    data = load_excursions()
    categories = data.get("category", []) if isinstance(data, dict) else []
    cat = next((c for c in categories if c.get("id") == cat_id), None)
    if not cat:
        return tour_id
    tour = next((t for t in (cat.get("tour") or []) if t.get("id") == tour_id), None)
    return tour.get("title") if tour else tour_id

def _normalize_messenger(s: str) -> str | None:
    t = (s or "").strip().lower()
    if any(x in t for x in ("wa", "whatsapp", "–≤–∞—Ç—Å–∞–ø", "–≤–∞—Ç—Å–∞–ø–ø")):
        return "WhatsApp"
    if any(x in t for x in ("tg", "telegram", "—Ç–µ–ª–µ–≥—Ä–∞–º", "—Ç–µ–ª–µ–≥—Ä–∞–º–º")):
        return "Telegram"
    return None

def _normalize_yes_no(s: str) -> str | None:
    t = (s or "").strip().lower()
    if t in ("–¥–∞", "yes", "y", "–¥", "–∞–≥–∞", "–Ω—É–∂–Ω–æ", "–Ω–∞–¥–æ"):
        return "–î–∞"
    if t in ("–Ω–µ—Ç", "no", "n", "–Ω–µ", "–Ω–µ –Ω—É–∂–Ω–æ", "–Ω–µ –Ω–∞–¥–æ"):
        return "–ù–µ—Ç"
    return None

@router.callback_query(lambda cq: cq.data and (cq.data.startswith("book_exc:") or cq.data.startswith("book:")))
async def start_excursion_booking(query: CallbackQuery, state: FSMContext):
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞: book_exc: –∏ book:
    parts = query.data.split(":")[1:]  # –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if len(parts) < 2:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return
    cat_id, exc_id = parts[-2], parts[-1]

    await state.update_data(cat_id=cat_id, excursion_id=exc_id)
    await state.set_state(BookingStates.waiting_name)
    await query.message.answer("–í–∞—à–µ –∏–º—è?")
    await query.answer()

@router.message(BookingStates.waiting_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=(message.text or "").strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –≤—Å–µ–≥–æ (–≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –¥–µ—Ç–µ–π)?")
    await state.set_state(BookingStates.waiting_count)

@router.message(BookingStates.waiting_count)
async def process_count(message: Message, state: FSMContext):
    await state.update_data(count=(message.text or "").strip())
    await message.answer("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?")
    await state.set_state(BookingStates.waiting_date)

@router.message(BookingStates.waiting_date)
async def process_date(message: Message, state: FSMContext):
    await state.update_data(date=(message.text or "").strip())
    await message.answer("–ì–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ (–æ—Ç–µ–ª—å/—Ä–∞–π–æ–Ω)?")
    await state.set_state(BookingStates.waiting_residence)

@router.message(BookingStates.waiting_residence)
async def process_residence(message: Message, state: FSMContext):
    await state.update_data(residence=(message.text or "").strip())
    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Äî –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞", callback_data="book_transport:yes"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="book_transport:no"),
    ]])
    await message.answer("–ù—É–∂–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?", reply_markup=kb)
    await state.set_state(BookingStates.waiting_transport)

# –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Äî –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏
@router.callback_query(BookingStates.waiting_transport, F.data.startswith("book_transport:"))
async def transport_cb(query: CallbackQuery, state: FSMContext):
    code = query.data.split(":")[1]
    await state.update_data(transport="–î–∞" if code == "yes" else "–ù–µ—Ç")
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="WhatsApp", callback_data="book_messenger:wa"),
        InlineKeyboardButton(text="Telegram", callback_data="book_messenger:tg"),
    ]])
    await query.message.answer("–ì–¥–µ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è?", reply_markup=kb)
    await state.set_state(BookingStates.waiting_messenger)
    await query.answer()

# –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç ‚Äî —Ñ–æ–ª–±—ç–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
@router.message(BookingStates.waiting_transport)
async def transport_msg(message: Message, state: FSMContext):
    ans = _normalize_yes_no(message.text)
    if not ans:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–î–∞", callback_data="book_transport:yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="book_transport:no"),
        ]])
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É: –î–∞ –∏–ª–∏ –ù–µ—Ç.", reply_markup=kb)
        return
    await state.update_data(transport=ans)
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="WhatsApp", callback_data="book_messenger:wa"),
        InlineKeyboardButton(text="Telegram", callback_data="book_messenger:tg"),
    ]])
    await message.answer("–ì–¥–µ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è?", reply_markup=kb)
    await state.set_state(BookingStates.waiting_messenger)

# –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä ‚Äî –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∞–º–∏
@router.callback_query(BookingStates.waiting_messenger, F.data.startswith("book_messenger:"))
async def choose_messenger_cb(query: CallbackQuery, state: FSMContext):
    code = query.data.split(":")[1]
    messenger = "WhatsApp" if code == "wa" else "Telegram"
    await state.update_data(messenger=messenger)
    await query.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É.")
    await state.set_state(BookingStates.waiting_phone)
    await query.answer()

# –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä ‚Äî —Ñ–æ–ª–±—ç–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
@router.message(BookingStates.waiting_messenger)
async def choose_messenger_msg(message: Message, state: FSMContext):
    m = _normalize_messenger(message.text)
    if not m:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="WhatsApp", callback_data="book_messenger:wa"),
            InlineKeyboardButton(text="Telegram", callback_data="book_messenger:tg"),
        ]])
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É: WhatsApp –∏–ª–∏ Telegram.", reply_markup=kb)
        return
    await state.update_data(messenger=m)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É")
    await state.set_state(BookingStates.waiting_phone)

@router.message(BookingStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = (message.text or "").strip()
    await state.update_data(phone=phone)
    await message.answer("–ü–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? (–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä)")
    await state.set_state(BookingStates.waiting_wishes)

@router.message(BookingStates.waiting_wishes)
async def process_wishes(message: Message, state: FSMContext):
    data = await state.get_data()
    wishes = (message.text or "").strip()
    await state.update_data(wishes=wishes)

    cat_id = data.get("cat_id")
    exc_id = data.get("excursion_id")
    title = _get_title(cat_id, exc_id)

    user = message.from_user
    contact = f"@{user.username}" if user.username else f"[–∫–ª–∏–µ–Ω—Ç](tg://user?id={user.id})"

    text = (
        "‚úÖ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –≠–ö–°–ö–£–†–°–ò–Æ ‚úâÔ∏è\n"
        f"*–≠–∫—Å–∫—É—Ä—Å–∏—è:* {title}\n"
        f"*–ò–º—è:* {data.get('name')}\n"
        f"*–ì–æ—Å—Ç–∏:* {data.get('count')}\n"
        f"*–î–∞—Ç–∞:* {data.get('date')}\n"
        f"*–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:* {data.get('residence')}\n"
        f"*–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:* {data.get('transport')}\n"
        f"*–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:* {data.get('messenger')}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone')}\n"
        f"*–ü–æ–∂–µ–ª–∞–Ω–∏—è:* {wishes}\n"
        f"*–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞:* {contact}"
    )

    await message.bot.send_message(chat_id=ADMIN_CHAT, text=text, parse_mode="Markdown")

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏", callback_data=f"details:{cat_id}:{exc_id}")]
    ])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=markup)

    await state.clear()
