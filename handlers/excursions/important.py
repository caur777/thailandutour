# handlers/excursions/important.py
from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from pathlib import Path
import logging

from utils.ux import show_screen_text

important_router = Router()
IMPORTANT_DIR = Path(__file__).parent.parent.parent / "data" / "important"

def _menu_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üß≠ –ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã", callback_data="imp:process")
    kb.button(text="üè® –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –ü—Ö–∏–ø—Ö–∏", callback_data="imp:phi")
    kb.button(text="‚õ∫ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ–∑–µ—Ä–µ –ß–µ–æ–ª–∞–Ω", callback_data="imp:cheo")
    kb.button(text="‚Ü©Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω—ã", callback_data="imp:cancellation")
    kb.button(text="üìÇ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç—É—Ä–æ–≤", callback_data="show_catalog_list")
    kb.button(text="üíõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    return kb.as_markup()

def _back_keyboard(back_cb: str | None):
    kb = InlineKeyboardBuilder()
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ —Ç—É—Ä–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ‚Äî –≤–µ–¥—ë–º –Ω–∞–∑–∞–¥ –≤ —Ü–µ–Ω—ã —Ç—É—Ä–∞,
    # –∏–Ω–∞—á–µ ‚Äî –≤ –º–µ–Ω—é "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb or "important_menu")
    kb.button(text="üìÇ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç—É—Ä–æ–≤", callback_data="show_catalog_list")
    kb.button(text="üíõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    kb.adjust(1)
    return kb.as_markup()

@important_router.callback_query(lambda cq: cq.data == "important_menu")
async def important_menu(query: CallbackQuery, state: FSMContext):
    text = (
        "‚ÑπÔ∏è <b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω—ã."
    )
    await show_screen_text(query, state, text, reply_markup=_menu_keyboard(), parse_mode="HTML")

@important_router.callback_query(lambda cq: cq.data and cq.data.startswith("imp:"))
async def important_section(query: CallbackQuery, state: FSMContext):
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã:
    # imp:phi
    # imp:phi:<cat_id>:<tour_id>   ‚Üê –∏–∑ —Ü–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞
    tokens = query.data.split(":")
    # tokens[0] = "imp"
    section = tokens[1] if len(tokens) > 1 else ""
    cat_id = tokens[2] if len(tokens) > 2 else None
    tour_id = tokens[3] if len(tokens) > 3 else None

    files = {
        "process":      "process.md",
        "phi":          "pp_accommodation.md",
        "cheo":         "cheowlan_accommodation.md",
        "cancellation": "cancellation.md",
    }
    fname = files.get(section)
    if not fname:
        logging.warning("Unknown important section: %r", section)
        return

    try:
        text = (IMPORTANT_DIR / fname).read_text(encoding="utf-8")
    except Exception as e:
        logging.exception("Failed to read important file %s: %s", fname, e)
        return

    back_cb = f"tour:prices:{cat_id}:{tour_id}" if (cat_id and tour_id) else None
    await show_screen_text(query, state, text, reply_markup=_back_keyboard(back_cb), parse_mode=None)
