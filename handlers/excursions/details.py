# handlers/excursions/details.py
from aiogram import Router
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from pathlib import Path
import logging

from utils.loader import get_category_by_id
from utils.ux import show_screen_text, show_screen_photo

details_router = Router()
TOURS_DIR = Path(__file__).parent.parent.parent / "data" / "excursions"

def _tour_dir(cat_id: str, tour_id: str) -> Path:
    return TOURS_DIR / cat_id / tour_id

def _read_text(p: Path) -> str:
    try:
        return p.read_text(encoding="utf-8").strip()
    except Exception as e:
        logging.exception("Failed to read %s: %s", p, e)
        return ""

def _find_welcome_image(cat_id: str, tour_id: str) -> Path | None:
    base = _tour_dir(cat_id, tour_id)
    for ext in (".jpg", ".jpeg", ".png", ".webp"):
        p = base / f"welcome{ext}"
        if p.exists():
            return p
    gal = base / "gallery"
    if gal.is_dir():
        for ext in (".jpg", ".jpeg", ".png", ".webp"):
            p = gal / f"cover{ext}"
            if p.exists():
                return p
        for p in sorted(gal.iterdir()):
            if p.is_file() and p.suffix.lower() in {".jpg", ".jpeg", ".png", ".webp"}:
                return p
    return None

# ---- –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ (–ü—Ö–∏-–ü—Ö–∏ –∏ –ß–µ–æ-–õ–∞–Ω) ----------------------------------------

def _has_phi_accommodation(cat_id: str, tour_id: str) -> bool:
    # –º–∞—Ä–∫–µ—Ä: –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    return (_tour_dir(cat_id, tour_id) / "accommodation_phi.md").exists()

def _has_chl_accommodation(cat_id: str, tour_id: str) -> bool:
    # –º–∞—Ä–∫–µ—Ä: –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–∑–µ—Ä–∞ –ß–µ–æ-–õ–∞–Ω
    return (_tour_dir(cat_id, tour_id) / "accommodation_chl.md").exists()

def _menu_kb(cat_id: str, tour_id: str, *, add_phi_btn: bool = False):
    # –ö–Ω–æ–ø–∫–∏ —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/—Ö—ç—à—Ç–µ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö
    kb = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã)
    has_phi = add_phi_btn or _has_phi_accommodation(cat_id, tour_id)
    has_chl = _has_chl_accommodation(cat_id, tour_id)
    if has_phi:
        kb.button(text="üè® –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –ü—Ö–∏-–ü—Ö–∏", callback_data=f"imp:phi:{cat_id}:{tour_id}")
    if has_chl:
        kb.button(text="üèûÔ∏è –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –ß–µ–æ-–õ–∞–Ω", callback_data=f"imp:chl:{cat_id}:{tour_id}")

    kb.button(text="üó∫Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–∞—Ä—à—Ä—É—Ç", callback_data=f"tour:info:{cat_id}:{tour_id}")
    kb.button(text="üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è", callback_data=f"gallery:{cat_id}:{tour_id}")
    kb.button(text="üí∞ –ü—Ä–∞–π—Å", callback_data=f"tour:prices:{cat_id}:{tour_id}")
    kb.button(text="üì≤ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_exc:{cat_id}:{tour_id}")
    kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–æ–≤", callback_data=f"category:{cat_id}")
    kb.adjust(1)
    return kb.as_markup()

# ---- –≠–∫—Ä–∞–Ω—ã —Ç—É—Ä–∞ ------------------------------------------------------------

@details_router.callback_query(lambda cq: cq.data and cq.data.startswith("details:"))
async def show_tour_welcome(query: CallbackQuery, state: FSMContext):
    _, cat_id, tour_id = query.data.split(":", 2)

    category = get_category_by_id(cat_id)
    if not category or not isinstance(category.get("tour"), list):
        await show_screen_text(query, state, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    tour = next((t for t in category["tour"] if isinstance(t, dict) and t.get("id") == tour_id), None)
    if not tour:
        await show_screen_text(query, state, "–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=_menu_kb(cat_id, tour_id))
        return

    title = tour.get("title", "–¢—É—Ä")
    welcome_text = _read_text(_tour_dir(cat_id, tour_id) / "welcome.md")
    caption = (f"üèùÔ∏è <b>{title}</b>\n\n{welcome_text}").strip()

    img_path = _find_welcome_image(cat_id, tour_id)
    if img_path and img_path.exists():
        await show_screen_photo(
            query, state,
            photo=FSInputFile(str(img_path)),
            caption=caption,
            reply_markup=_menu_kb(cat_id, tour_id),
            parse_mode="HTML",
        )
    else:
        await show_screen_text(
            query, state,
            caption,
            reply_markup=_menu_kb(cat_id, tour_id),
            parse_mode="HTML",
        )

@details_router.callback_query(lambda cq: cq.data and cq.data.startswith("tour:"))
async def show_tour_section(query: CallbackQuery, state: FSMContext):
    # tour:<section>:<cat_id>:<tour_id>
    _, section, cat_id, tour_id = query.data.split(":", 3)

    if section == "info":
        text = _read_text(_tour_dir(cat_id, tour_id) / "info.md") or "–û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–∞—Ä—à—Ä—É—Ç –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ."
        await show_screen_text(query, state, text, reply_markup=_menu_kb(cat_id, tour_id), parse_mode=None)
        return

    if section == "prices":
        text = _read_text(_tour_dir(cat_id, tour_id) / "prices.md") or "–¶–µ–Ω—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ."
        add_phi = _has_phi_accommodation(cat_id, tour_id)
        await show_screen_text(
            query, state, text,
            reply_markup=_menu_kb(cat_id, tour_id, add_phi_btn=add_phi),
            parse_mode=None
        )
        return

    # –ì–∞–ª–µ—Ä–µ—è –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ handlers/excursions/gallery.py
