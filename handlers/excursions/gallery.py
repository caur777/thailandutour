# handlers/excursions/gallery.py
from aiogram import Router
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from pathlib import Path
import re

router = Router()

# –ü–∞–ø–∫–∞: data/excursions/<cat_id>/<tour_id>/gallery
BASE_DIR = Path(__file__).parent.parent.parent / "data" / "excursions"

IMAGE_EXTS = (".jpg", ".jpeg", ".png", ".webp", ".gif", ".bmp", ".tif", ".tiff", ".jfif", ".heic", ".heif")
_num_re = re.compile(r"(\d+)")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—É—Ä—É
# –∫–ª—é—á: f"{user_id}:{cat_id}:{tour_id}"
_user_idx: dict[str, int] = {}
_user_files: dict[str, list[Path]] = {}

def _key(user_id: int, cat_id: str, tour_id: str) -> str:
    return f"{user_id}:{cat_id}:{tour_id}"

def _gallery_dir(cat_id: str, tour_id: str) -> Path:
    return BASE_DIR / cat_id / tour_id / "gallery"

def _natural_key(p: Path):
    name = p.name
    return [int(s) if s.isdigit() else s.lower() for s in _num_re.split(name)]

def _collect_files(cat_id: str, tour_id: str) -> list[Path]:
    gal = _gallery_dir(cat_id, tour_id)
    if not gal.is_dir():
        return []
    files = [p for p in gal.iterdir() if p.is_file() and p.suffix.lower() in IMAGE_EXTS]
    files.sort(key=_natural_key)
    return files

async def _send_frame(query: CallbackQuery, user_id: int, cat_id: str, tour_id: str):
    key = _key(user_id, cat_id, tour_id)
    files = _user_files.get(key, [])
    if not files:
        await query.answer("–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞", show_alert=True)
        return

    idx = max(0, min(_user_idx.get(key, 0), len(files) - 1))
    _user_idx[key] = idx
    path = files[idx]

    caption = f"üì∑ –ì–∞–ª–µ—Ä–µ—è\n–§–æ—Ç–æ {idx + 1} –∏–∑ {len(files)}\n–õ–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."

    kb = InlineKeyboardBuilder()
    if idx > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"gallery_prev:{cat_id}:{tour_id}")
    kb.button(text=f"{idx + 1}/{len(files)}", callback_data="noop")
    if idx < len(files) - 1:
        kb.button(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"gallery_next:{cat_id}:{tour_id}")
    kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏", callback_data=f"details:{cat_id}:{tour_id}")
    kb.adjust(3)

    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –ª–µ–Ω—Ç—É
    try:
        await query.message.delete()
    except TelegramBadRequest:
        pass

    file = FSInputFile(str(path))
    ext = path.suffix.lower()

    try:
        if ext == ".gif":
            await query.message.answer_animation(animation=file, caption=caption, reply_markup=kb.as_markup())
        else:
            await query.message.answer_photo(photo=file, caption=caption, reply_markup=kb.as_markup())
    except TelegramBadRequest:
        # –§–æ–ª–±—ç–∫ –¥–ª—è —Ä–µ–¥–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: —à–ª—ë–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await query.message.answer_document(document=file, caption=caption, reply_markup=kb.as_markup())

    await query.answer()

# –û—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é
@router.callback_query(lambda cq: cq.data and cq.data.startswith("gallery:"))
async def gallery_open(query: CallbackQuery):
    # gallery:<cat_id>:<tour_id>
    _, cat_id, tour_id = query.data.split(":", 2)

    files = _collect_files(cat_id, tour_id)
    if not files:
        await query.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    key = _key(query.from_user.id, cat_id, tour_id)
    _user_files[key] = files
    _user_idx[key] = 0

    await _send_frame(query, query.from_user.id, cat_id, tour_id)

# –õ–∏—Å—Ç–∞–Ω–∏–µ –≤–ø–µ—Ä—ë–¥
@router.callback_query(lambda cq: cq.data and cq.data.startswith("gallery_next:"))
async def gallery_next(query: CallbackQuery):
    _, cat_id, tour_id = query.data.split(":", 2)
    key = _key(query.from_user.id, cat_id, tour_id)
    if key in _user_idx:
        _user_idx[key] += 1
    await _send_frame(query, query.from_user.id, cat_id, tour_id)

# –õ–∏—Å—Ç–∞–Ω–∏–µ –Ω–∞–∑–∞–¥
@router.callback_query(lambda cq: cq.data and cq.data.startswith("gallery_prev:"))
async def gallery_prev(query: CallbackQuery):
    _, cat_id, tour_id = query.data.split(":", 2)
    key = _key(query.from_user.id, cat_id, tour_id)
    if key in _user_idx:
        _user_idx[key] -= 1
    await _send_frame(query, query.from_user.id, cat_id, tour_id)
